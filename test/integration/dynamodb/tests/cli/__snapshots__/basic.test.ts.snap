// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI generates correct zod schemas with basic options > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_ORDERS = 'Orders';
export const TABLE_PRODUCTS = 'Products';
export const TABLE_SESSIONS = 'Sessions';
export const TABLE_USERS = 'Users';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './orders/index.js';
export * from './products/index.js';
export * from './sessions/index.js';
export * from './users/index.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/orders/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/orders/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';


/**
 * Read schema for the "Orders" table.
 * Validates raw rows read from the database.
 */
export const OrdersTableSchema = z.object({
     /**
      * dataType: string
      */
    createdAt: z.string(),
     /**
      * dataType: number
      */
    total: z.number(),
     /**
      * dataType: any
      */
    coupon: z.any(),
     /**
      * dataType: object
      */
    shipping: z.any(),
     /**
      * dataType: string
      */
    orderId: z.string(),
     /**
      * dataType: array
      */
    items: z.any(),
});

/**
 * Insert schema for the "Orders" table.
 */
export const OrdersTableInsertSchema = z.object({
     /**
      * dataType: string
      */
    createdAt: z.string(),
     /**
      * dataType: number
      */
    total: z.number(),
     /**
      * dataType: any
      */
    coupon: z.any(),
     /**
      * dataType: object
      */
    shipping: z.any(),
     /**
      * dataType: string
      */
    orderId: z.string(),
     /**
      * dataType: array
      */
    items: z.any(),
});

/**
 * Update schema for the "Orders" table.
 */
export const OrdersTableUpdateSchema = OrdersTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof OrdersTableInsertSchema>;
type TableReadRecord = z.output<typeof OrdersTableSchema>;

/**
 * Read record for the ".Orders" table.
 */
export interface OrderRecord {
    /**
    */
    createdAt: TableReadRecord['createdAt'];
    /**
    */
    total: TableReadRecord['total'];
    /**
    */
    coupon: TableReadRecord['coupon'];
    /**
    */
    shipping: TableReadRecord['shipping'];
    /**
    */
    orderId: TableReadRecord['orderId'];
    /**
    */
    items: TableReadRecord['items'];
}

/**
 * Insertable record for the "Orders" table.
 */
export interface OrderInsertRecord {
    /**
    */
    createdAt: TableInsertRecord['createdAt'];
    /**
    */
    total: TableInsertRecord['total'];
    /**
    */
    coupon: TableInsertRecord['coupon'];
    /**
    */
    shipping: TableInsertRecord['shipping'];
    /**
    */
    orderId: TableInsertRecord['orderId'];
    /**
    */
    items: TableInsertRecord['items'];
}

/**
 * Updatable record for the "Orders" table.
 */
export type OrderUpdateRecord = Partial<OrderInsertRecord>;

"
`;

exports[`CLI generates correct zod schemas with basic options > tables/products/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/products/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';


/**
 * Read schema for the "Products" table.
 * Validates raw rows read from the database.
 */
export const ProductsTableSchema = z.object({
     /**
      * dataType: string
      */
    image: z.string(),
     /**
      * dataType: object
      */
    metadata: z.any(),
     /**
      * dataType: number
      */
    price: z.number(),
     /**
      * dataType: array
      */
    ratings: z.any(),
     /**
      * dataType: string
      */
    name: z.string(),
     /**
      * dataType: boolean
      */
    inStock: z.boolean(),
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: array
      */
    categories: z.any(),
});

/**
 * Insert schema for the "Products" table.
 */
export const ProductsTableInsertSchema = z.object({
     /**
      * dataType: string
      */
    image: z.string(),
     /**
      * dataType: object
      */
    metadata: z.any(),
     /**
      * dataType: number
      */
    price: z.number(),
     /**
      * dataType: array
      */
    ratings: z.any(),
     /**
      * dataType: string
      */
    name: z.string(),
     /**
      * dataType: boolean
      */
    inStock: z.boolean(),
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: array
      */
    categories: z.any(),
});

/**
 * Update schema for the "Products" table.
 */
export const ProductsTableUpdateSchema = ProductsTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof ProductsTableInsertSchema>;
type TableReadRecord = z.output<typeof ProductsTableSchema>;

/**
 * Read record for the ".Products" table.
 */
export interface ProductRecord {
    /**
    */
    image: TableReadRecord['image'];
    /**
    */
    metadata: TableReadRecord['metadata'];
    /**
    */
    price: TableReadRecord['price'];
    /**
    */
    ratings: TableReadRecord['ratings'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    inStock: TableReadRecord['inStock'];
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    categories: TableReadRecord['categories'];
}

/**
 * Insertable record for the "Products" table.
 */
export interface ProductInsertRecord {
    /**
    */
    image: TableInsertRecord['image'];
    /**
    */
    metadata: TableInsertRecord['metadata'];
    /**
    */
    price: TableInsertRecord['price'];
    /**
    */
    ratings: TableInsertRecord['ratings'];
    /**
    */
    name: TableInsertRecord['name'];
    /**
    */
    inStock: TableInsertRecord['inStock'];
    /**
    */
    id: TableInsertRecord['id'];
    /**
    */
    categories: TableInsertRecord['categories'];
}

/**
 * Updatable record for the "Products" table.
 */
export type ProductUpdateRecord = Partial<ProductInsertRecord>;

"
`;

exports[`CLI generates correct zod schemas with basic options > tables/sessions/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/sessions/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';


/**
 * Read schema for the "Sessions" table.
 * Validates raw rows read from the database.
 */
export const SessionsTableSchema = z.object({
     /**
      * dataType: array
      */
    tokens: z.any(),
     /**
      * dataType: number
      */
    expires: z.number(),
     /**
      * dataType: string
      */
    sessionId: z.string(),
     /**
      * dataType: string
      */
    userId: z.string(),
});

/**
 * Insert schema for the "Sessions" table.
 */
export const SessionsTableInsertSchema = z.object({
     /**
      * dataType: array
      */
    tokens: z.any(),
     /**
      * dataType: number
      */
    expires: z.number(),
     /**
      * dataType: string
      */
    sessionId: z.string(),
     /**
      * dataType: string
      */
    userId: z.string(),
});

/**
 * Update schema for the "Sessions" table.
 */
export const SessionsTableUpdateSchema = SessionsTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof SessionsTableInsertSchema>;
type TableReadRecord = z.output<typeof SessionsTableSchema>;

/**
 * Read record for the ".Sessions" table.
 */
export interface SessionRecord {
    /**
    */
    tokens: TableReadRecord['tokens'];
    /**
    */
    expires: TableReadRecord['expires'];
    /**
    */
    sessionId: TableReadRecord['sessionId'];
    /**
    */
    userId: TableReadRecord['userId'];
}

/**
 * Insertable record for the "Sessions" table.
 */
export interface SessionInsertRecord {
    /**
    */
    tokens: TableInsertRecord['tokens'];
    /**
    */
    expires: TableInsertRecord['expires'];
    /**
    */
    sessionId: TableInsertRecord['sessionId'];
    /**
    */
    userId: TableInsertRecord['userId'];
}

/**
 * Updatable record for the "Sessions" table.
 */
export type SessionUpdateRecord = Partial<SessionInsertRecord>;

"
`;

exports[`CLI generates correct zod schemas with basic options > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';


/**
 * Read schema for the "Users" table.
 * Validates raw rows read from the database.
 */
export const UsersTableSchema = z.object({
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: string
      */
    sort: z.string(),
     /**
      * dataType: string
      */
    email: z.string(),
     /**
      * dataType: object
      */
    profile: z.any(),
     /**
      * dataType: array
      */
    tags: z.any(),
});

/**
 * Insert schema for the "Users" table.
 */
export const UsersTableInsertSchema = z.object({
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: string
      */
    sort: z.string(),
     /**
      * dataType: string
      */
    email: z.string(),
     /**
      * dataType: object
      */
    profile: z.any(),
     /**
      * dataType: array
      */
    tags: z.any(),
});

/**
 * Update schema for the "Users" table.
 */
export const UsersTableUpdateSchema = UsersTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record for the ".Users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    sort: TableReadRecord['sort'];
    /**
    */
    email: TableReadRecord['email'];
    /**
    */
    profile: TableReadRecord['profile'];
    /**
    */
    tags: TableReadRecord['tags'];
}

/**
 * Insertable record for the "Users" table.
 */
export interface UserInsertRecord {
    /**
    */
    id: TableInsertRecord['id'];
    /**
    */
    sort: TableInsertRecord['sort'];
    /**
    */
    email: TableInsertRecord['email'];
    /**
    */
    profile: TableInsertRecord['profile'];
    /**
    */
    tags: TableInsertRecord['tags'];
}

/**
 * Updatable record for the "Users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

"
`;

exports[`CLI generates correct zod schemas with basic options > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'Orders'
    | 'Products'
    | 'Sessions'
    | 'Users'
"
`;
