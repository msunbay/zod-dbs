// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI generates correct zod schemas with basic options > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './users/index.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const USERS_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Read schema for the "test.users" table.
 * Validates raw rows read from the database.
 */
export const users_table_schema = z.object({
     /**
      * dataType: int
      */
    id: z.number(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: json
      */
    profile: z.json().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamp
      */
    created_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: enum
      */
    roles: z.enum(USERS_ROLES).nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * Insert schema for the "test.users" table.
 */
export const users_table_insert_schema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: active
      */
    status: z.string().max(20).nullable().optional(),
     /**
      * dataType: json
      */
    profile: z.json().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamp
      * defaultValue: CURRENT_TIMESTAMP
      */
    created_at: z.date().nullable().transform((value) => value ? value.toISOString() : value).optional(),
     /**
      * dataType: enum
      * defaultValue: viewer
      */
    roles: z.enum(USERS_ROLES).nullable().optional(),
});

/**
 * Update schema for the "test.users" table.
 */
export const users_table_update_schema = users_table_insert_schema.partial();

type TableInsertRecord = z.input<typeof users_table_insert_schema>;
type TableReadRecord = z.output<typeof users_table_schema>;

/**
 * Read record for the "test.users" table.
 */
export interface users_record {
    id: TableReadRecord['id'];
    name: TableReadRecord['name'];
    email?: TableReadRecord['email'];
    status?: TableReadRecord['status'];
    profile?: TableReadRecord['profile'];
    created_at?: TableReadRecord['created_at'];
    roles?: TableReadRecord['roles'];
}

/**
 * Insertable record for the "test.users" table.
 */
export interface users_insert_record {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: active
    */
    status?: TableInsertRecord['status'];
    profile?: TableInsertRecord['profile'];
    /**
    * @default: CURRENT_TIMESTAMP
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    * @maxLen: 6
    * @default: viewer
    */
    roles?: TableInsertRecord['roles'];
}

/**
 * Updatable record for the "test.users" table.
 */
export type users_update_record = Partial<users_insert_record>;

export type users_roles = (typeof USERS_ROLES)[number];
"
`;

exports[`CLI generates correct zod schemas with basic options > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
