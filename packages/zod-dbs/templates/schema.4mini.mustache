// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod/mini';
{{#hasJsonSchemaImports}}
import { {{#jsonSchemaImports}}{{name}}{{^last}}, {{/last}}{{/jsonSchemaImports}} } from '{{{jsonSchemaImportLocation}}}';
{{/hasJsonSchemaImports}}

{{#enums}}
export const {{constantName}} = [{{#values}}'{{value}}'{{^last}}, {{/last}}{{/values}}] as const;
{{/enums}}

/**
 * Base read schema for the "{{fullName}}" {{type}}.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const {{tableReadBaseSchemaName}} = z.object({
{{#readableColumns}}
     /**
      * dataType: {{dataType}}
      */
    {{name}}: {{{renderedReadType}}},
{{/readableColumns}}
});

/**
 * The base record type for the "{{fullName}}" {{type}}.
 * This type represents the raw database record without case transforms.
 */
export type {{{tableReadBaseRecordName}}} = z.output<typeof {{tableReadBaseSchemaName}}>;

/**
 * Read transform for the "{{fullName}}" {{type}}.
 * Maps database fields to app case properties.
 */
export const {{tableReadTransformName}} = (data: {{{tableReadBaseRecordName}}}): {
{{#readableColumns}}
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: {{{tableReadBaseRecordName}}}['{{name}}'],
{{/readableColumns}}
} => ({
{{#readableColumns}}
    {{propertyName}}: data.{{name}},
{{/readableColumns}}
});

/**
 * Read schema for the "{{fullName}}" {{type}} (after casing transform).
 */
export const {{tableReadSchemaName}} = z.pipe({{tableReadBaseSchemaName}}, z.transform({{tableReadTransformName}}));

{{#isWritable}}
/**
 * Base insert/write schema for the "{{fullName}}" {{type}} (no casing transforms).
 */
export const {{tableInsertBaseSchemaName}} = z.object({
{{#writableColumns}}
     /**
      * dataType: {{dataType}}{{#defaultValue}}
      * defaultValue: {{{defaultValue}}}{{/defaultValue}}
      */
    {{propertyName}}: {{{renderedWriteType}}},
{{/writableColumns}}
});

/**
 * The base record type for the "{{fullName}}" {{type}}.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type {{{tableInsertBaseRecordName}}} = z.output<typeof {{tableInsertBaseSchemaName}}>;

/**
 * The base record type for the "{{fullName}}" {{type}}.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type {{{tableUpdateBaseRecordName}}} = Partial<{{{tableInsertBaseRecordName}}}>;

/**
 * Insert transform for the "{{fullName}}" {{type}}.
 * Maps app cased properties to database fields.
 */
export const {{tableInsertTransformName}} = (data: {{{tableInsertBaseRecordName}}}): {
{{#writableColumns}}
    {{name}}{{#isOptional}}?{{/isOptional}}: {{{tableInsertBaseRecordName}}}['{{propertyName}}'],
{{/writableColumns}}
} => ({
{{#writableColumns}}
    {{name}}: data.{{propertyName}},
{{/writableColumns}}
});

/**
 * Update transform for the "{{fullName}}" {{type}}.
 * Maps app cased properties to database fields.
 */
export const {{tableUpdateTransformName}} = (data: {{{tableUpdateBaseRecordName}}}): {
{{#writableColumns}}
    {{name}}{{#isOptional}}?{{/isOptional}}: {{{tableUpdateBaseRecordName}}}['{{propertyName}}'],
{{/writableColumns}}
} => ({
{{#writableColumns}}
    {{name}}: data.{{propertyName}},
{{/writableColumns}}
});

/**
 * Insert schema for the "{{fullName}}" {{type}} (after casing transform).
 */
export const {{tableInsertSchemaName}} = z.pipe({{tableInsertBaseSchemaName}}, z.transform({{tableInsertTransformName}}));

/**
 * Update schema for the "{{fullName}}" {{type}} (after casing transform).
 */
export const {{tableUpdateSchemaName}} = z.pipe(z.partial({{tableInsertBaseSchemaName}}), z.transform({{tableUpdateTransformName}}));

type TableInsertRecord = z.input<typeof {{tableInsertSchemaName}}>;
{{/isWritable}}
type TableReadRecord = z.output<typeof {{tableReadSchemaName}}>;

/**
 * Read record (casing transformed) for the "{{schemaName}}.{{tableName}}" {{type}}.
 */
export interface {{tableReadRecordName}} {
{{#readableColumns}}
    /**
    {{#description}}* {{{description}}}
    {{/description}}{{#isDeprecated}}* @deprecated {{isDeprecatedReason}}
    {{/isDeprecated}}*/
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: TableReadRecord['{{propertyName}}'];
{{/readableColumns}}
}
{{#isWritable}}

/**
 * Insert record (casing transformed) for the "{{fullName}}" {{type}}.
 */
export interface {{tableInsertRecordName}} {
{{#writableColumns}}
    /**
    {{#description}}* {{{description}}}
    {{/description}}{{#maxLen}}* @maxLen: {{maxLen}}
    {{/maxLen}}{{#defaultValue}}* @default: {{{defaultValue}}}
    {{/defaultValue}}{{#isDeprecated}}* @deprecated {{isDeprecatedReason}}
    {{/isDeprecated}}*/
    {{propertyName}}{{#isOptional}}?{{/isOptional}}: TableInsertRecord['{{propertyName}}'];
{{/writableColumns}}
}

/**
 * Updatable record (casing transformed) for the "{{fullName}}" {{type}}.
 */
export type {{tableUpdateRecordName}} = Partial<{{tableInsertRecordName}}>;
{{/isWritable}}

{{#enums}}
export type {{typeName}} = (typeof {{constantName}})[number];
{{/enums}}
