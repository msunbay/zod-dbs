// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generates correct zod schemas with disabled singularization 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const POSTS_STATUSES = ['draft', 'published', 'archived'] as const;

/**
 * Base read schema for the "public.posts" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const PostsTableBaseSchema = z.object({
     /**
      * dataType: int4
      */
    id: z.number(),
     /**
      * dataType: int4
      */
    user_id: z.number().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    title: z.string(),
     /**
      * dataType: text
      */
    content: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bool
      */
    published: z.boolean().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.enum(POSTS_STATUSES).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    views: z.number().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    published_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    updated_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.posts" table.
 * This type represents the raw database record without case transforms.
 */
export type PostsBaseRecord = z.output<typeof PostsTableBaseSchema>;

/**
 * Read transform for the "public.posts" table.
 * Maps database fields to app case properties.
 */
export const transformPostsBaseRecord = (data: PostsBaseRecord): {
    id: PostsBaseRecord['id'],
    userId?: PostsBaseRecord['user_id'],
    title: PostsBaseRecord['title'],
    content?: PostsBaseRecord['content'],
    published?: PostsBaseRecord['published'],
    status?: PostsBaseRecord['status'],
    views?: PostsBaseRecord['views'],
    tags?: PostsBaseRecord['tags'],
    metadata?: PostsBaseRecord['metadata'],
    publishedAt?: PostsBaseRecord['published_at'],
    updatedAt?: PostsBaseRecord['updated_at'],
} => ({
    id: data.id,
    userId: data.user_id,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    publishedAt: data.published_at,
    updatedAt: data.updated_at,
});

/**
 * Read schema for the "public.posts" table (after casing transform).
 */
export const PostsTableSchema = PostsTableBaseSchema.transform(transformPostsBaseRecord);

/**
 * Base insert/write schema for the "public.posts" table (no casing transforms).
 */
export const PostsTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    userId: z.number().int().nullable().optional(),
     /**
      * dataType: text
      */
    title: z.string(),
     /**
      * dataType: text
      */
    content: z.string().nullable().optional(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    published: z.boolean().nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'draft'::character varying
      */
    status: z.enum(POSTS_STATUSES).nullable().optional(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    views: z.number().int().nullable().optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullable().optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      */
    publishedAt: z.date().nullable().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updatedAt: z.date().nullable().optional(),
});

/**
 * The base record type for the "public.posts" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type PostsInsertBaseRecord = z.output<typeof PostsTableInsertBaseSchema>;

/**
 * The base record type for the "public.posts" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type PostsUpdateBaseRecord = Partial<PostsInsertBaseRecord>;

/**
 * Insert transform for the "public.posts" table.
 * Maps app cased properties to database fields.
 */
export const transformPostsInsertBaseRecord = (data: PostsInsertBaseRecord): {
    user_id?: PostsInsertBaseRecord['userId'],
    title: PostsInsertBaseRecord['title'],
    content?: PostsInsertBaseRecord['content'],
    published?: PostsInsertBaseRecord['published'],
    status?: PostsInsertBaseRecord['status'],
    views?: PostsInsertBaseRecord['views'],
    tags?: PostsInsertBaseRecord['tags'],
    metadata?: PostsInsertBaseRecord['metadata'],
    published_at?: PostsInsertBaseRecord['publishedAt'],
    updated_at?: PostsInsertBaseRecord['updatedAt'],
} => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
});

/**
 * Update transform for the "public.posts" table.
 * Maps app cased properties to database fields.
 */
export const transformPostsUpdateBaseRecord = (data: PostsUpdateBaseRecord): {
    user_id?: PostsUpdateBaseRecord['userId'],
    title: PostsUpdateBaseRecord['title'],
    content?: PostsUpdateBaseRecord['content'],
    published?: PostsUpdateBaseRecord['published'],
    status?: PostsUpdateBaseRecord['status'],
    views?: PostsUpdateBaseRecord['views'],
    tags?: PostsUpdateBaseRecord['tags'],
    metadata?: PostsUpdateBaseRecord['metadata'],
    published_at?: PostsUpdateBaseRecord['publishedAt'],
    updated_at?: PostsUpdateBaseRecord['updatedAt'],
} => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
});

/**
 * Insert schema for the "public.posts" table (after casing transform).
 */
export const PostsTableInsertSchema = PostsTableInsertBaseSchema.transform(transformPostsInsertBaseRecord);

/**
 * Update schema for the "public.posts" table (after casing transform).
 */
export const PostsTableUpdateSchema = PostsTableInsertBaseSchema.partial().transform(transformPostsUpdateBaseRecord);

type TableInsertRecord = z.input<typeof PostsTableInsertSchema>;
type TableReadRecord = z.output<typeof PostsTableSchema>;

/**
 * Read record (casing transformed) for the "public.posts" table.
 */
export interface PostsRecord {
    id: TableReadRecord['id'];
    userId?: TableReadRecord['userId'];
    title: TableReadRecord['title'];
    content?: TableReadRecord['content'];
    published?: TableReadRecord['published'];
    status?: TableReadRecord['status'];
    /**
    * Number of views for the post
    */
    views?: TableReadRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableReadRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableReadRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableReadRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    */
    updatedAt?: TableReadRecord['updatedAt'];
}

/**
 * Insert record (casing transformed) for the "public.posts" table.
 */
export interface PostsInsertRecord {
    userId?: TableInsertRecord['userId'];
    title: TableInsertRecord['title'];
    content?: TableInsertRecord['content'];
    /**
    * @default: false
    */
    published?: TableInsertRecord['published'];
    /**
    * @maxLen: 20
    * @default: 'draft'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    * Number of views for the post
    * @default: 0
    */
    views?: TableInsertRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableInsertRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableInsertRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
 * Updatable record (casing transformed) for the "public.posts" table.
 */
export type PostsUpdateRecord = Partial<PostsInsertRecord>;

export type PostsStatus = (typeof POSTS_STATUSES)[number];
"
`;
