// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_POSTS = 'posts';
export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './posts/index.js';
export * from './users/index.js';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > tables/posts/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > tables/posts/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const POST_STATUSES = ['draft', 'published', 'archived'] as const;

/**
 * Base read schema for the "public.posts" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const PostsTableBaseSchema = z.object({
     /**
      * dataType: int4
      */
    id: z.number(),
     /**
      * dataType: int4
      */
    user_id: z.number().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: text
      */
    title: z.string(),
     /**
      * dataType: text
      */
    content: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: bool
      */
    published: z.boolean().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.enum(POST_STATUSES).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: int4
      */
    views: z.number().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    published_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    updated_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.posts" table.
 * This type represents the raw database record without case transforms.
 */
export type PostBaseRecord = z.output<typeof PostsTableBaseSchema>;

/**
 * Read transform for the "public.posts" table.
 * Maps database fields to app case properties.
 */
export const transformPostBaseRecord = (data: PostBaseRecord): {
    id: PostBaseRecord['id'],
    userId?: PostBaseRecord['user_id'],
    title: PostBaseRecord['title'],
    content?: PostBaseRecord['content'],
    published?: PostBaseRecord['published'],
    status?: PostBaseRecord['status'],
    views?: PostBaseRecord['views'],
    tags?: PostBaseRecord['tags'],
    metadata?: PostBaseRecord['metadata'],
    publishedAt?: PostBaseRecord['published_at'],
    updatedAt?: PostBaseRecord['updated_at'],
} => ({
    id: data.id,
    userId: data.user_id,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    publishedAt: data.published_at,
    updatedAt: data.updated_at,
});

/**
 * Read schema for the "public.posts" table (after casing transform).
 */
export const PostsTableSchema = PostsTableBaseSchema.transform(transformPostBaseRecord);

/**
 * Base insert/write schema for the "public.posts" table (no casing transforms).
 */
export const PostsTableInsertBaseSchema = z.object({
     /**
      * dataType: int4
      */
    userId: z.number().int().nullable().optional(),
     /**
      * dataType: text
      */
    title: z.string(),
     /**
      * dataType: text
      */
    content: z.string().nullable().optional(),
     /**
      * dataType: bool
      * defaultValue: false
      */
    published: z.boolean().nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'draft'::character varying
      */
    status: z.enum(POST_STATUSES).nullable().optional(),
     /**
      * dataType: int4
      * defaultValue: 0
      */
    views: z.number().int().nullable().optional(),
     /**
      * dataType: _text
      */
    tags: z.array(z.string()).nullable().optional(),
     /**
      * dataType: jsonb
      */
    metadata: z.any().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      */
    publishedAt: z.date().nullable().optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    updatedAt: z.date().nullable().optional(),
});

/**
 * The base record type for the "public.posts" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type PostInsertBaseRecord = z.output<typeof PostsTableInsertBaseSchema>;

/**
 * The base record type for the "public.posts" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type PostUpdateBaseRecord = Partial<PostInsertBaseRecord>;

/**
 * Insert transform for the "public.posts" table.
 * Maps app cased properties to database fields.
 */
export const transformPostInsertBaseRecord = (data: PostInsertBaseRecord): {
    user_id?: PostInsertBaseRecord['userId'],
    title: PostInsertBaseRecord['title'],
    content?: PostInsertBaseRecord['content'],
    published?: PostInsertBaseRecord['published'],
    status?: PostInsertBaseRecord['status'],
    views?: PostInsertBaseRecord['views'],
    tags?: PostInsertBaseRecord['tags'],
    metadata?: PostInsertBaseRecord['metadata'],
    published_at?: PostInsertBaseRecord['publishedAt'],
    updated_at?: PostInsertBaseRecord['updatedAt'],
} => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
});

/**
 * Update transform for the "public.posts" table.
 * Maps app cased properties to database fields.
 */
export const transformPostUpdateBaseRecord = (data: PostUpdateBaseRecord): {
    user_id?: PostUpdateBaseRecord['userId'],
    title: PostUpdateBaseRecord['title'],
    content?: PostUpdateBaseRecord['content'],
    published?: PostUpdateBaseRecord['published'],
    status?: PostUpdateBaseRecord['status'],
    views?: PostUpdateBaseRecord['views'],
    tags?: PostUpdateBaseRecord['tags'],
    metadata?: PostUpdateBaseRecord['metadata'],
    published_at?: PostUpdateBaseRecord['publishedAt'],
    updated_at?: PostUpdateBaseRecord['updatedAt'],
} => ({
    user_id: data.userId,
    title: data.title,
    content: data.content,
    published: data.published,
    status: data.status,
    views: data.views,
    tags: data.tags,
    metadata: data.metadata,
    published_at: data.publishedAt,
    updated_at: data.updatedAt,
});

/**
 * Insert schema for the "public.posts" table (after casing transform).
 */
export const PostsTableInsertSchema = PostsTableInsertBaseSchema.transform(transformPostInsertBaseRecord);

/**
 * Update schema for the "public.posts" table (after casing transform).
 */
export const PostsTableUpdateSchema = PostsTableInsertBaseSchema.partial().transform(transformPostUpdateBaseRecord);

type TableInsertRecord = z.input<typeof PostsTableInsertSchema>;
type TableReadRecord = z.output<typeof PostsTableSchema>;

/**
 * Read record (casing transformed) for the "public.posts" table.
 */
export interface PostRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    userId?: TableReadRecord['userId'];
    /**
    */
    title: TableReadRecord['title'];
    /**
    */
    content?: TableReadRecord['content'];
    /**
    */
    published?: TableReadRecord['published'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    * Number of views for the post
    */
    views?: TableReadRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableReadRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableReadRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableReadRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    */
    updatedAt?: TableReadRecord['updatedAt'];
}

/**
 * Insert record (casing transformed) for the "public.posts" table.
 */
export interface PostInsertRecord {
    /**
    */
    userId?: TableInsertRecord['userId'];
    /**
    */
    title: TableInsertRecord['title'];
    /**
    */
    content?: TableInsertRecord['content'];
    /**
    * @default: false
    */
    published?: TableInsertRecord['published'];
    /**
    * @maxLen: 20
    * @default: 'draft'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    * Number of views for the post
    * @default: 0
    */
    views?: TableInsertRecord['views'];
    /**
    * Array of tags associated with the post
    */
    tags?: TableInsertRecord['tags'];
    /**
    * Additional metadata for the post
    */
    metadata?: TableInsertRecord['metadata'];
    /**
    * Timestamp when the post was published
    */
    publishedAt?: TableInsertRecord['publishedAt'];
    /**
    * Timestamp when the post was last updated
    * @default: now()
    */
    updatedAt?: TableInsertRecord['updatedAt'];
}

/**
 * Updatable record (casing transformed) for the "public.posts" table.
 */
export type PostUpdateRecord = Partial<PostInsertRecord>;

export type PostStatus = (typeof POST_STATUSES)[number];
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Base read schema for the "public.users" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const UsersTableBaseSchema = z.object({
     /**
      * dataType: int4
      */
    id: z.number(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    created_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.coerce.date()).nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents the raw database record without case transforms.
 */
export type UserBaseRecord = z.output<typeof UsersTableBaseSchema>;

/**
 * Read transform for the "public.users" table.
 * Maps database fields to app case properties.
 */
export const transformUserBaseRecord = (data: UserBaseRecord): {
    id: UserBaseRecord['id'],
    name: UserBaseRecord['name'],
    email?: UserBaseRecord['email'],
    status?: UserBaseRecord['status'],
    profile?: UserBaseRecord['profile'],
    createdAt?: UserBaseRecord['created_at'],
    roles?: UserBaseRecord['roles'],
    dates?: UserBaseRecord['dates'],
} => ({
    id: data.id,
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    createdAt: data.created_at,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Read schema for the "public.users" table (after casing transform).
 */
export const UsersTableSchema = UsersTableBaseSchema.transform(transformUserBaseRecord);

/**
 * Base insert/write schema for the "public.users" table (no casing transforms).
 */
export const UsersTableInsertBaseSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullable().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    createdAt: z.date().nullable().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullable().optional(),
});

/**
 * The base record type for the "public.users" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserInsertBaseRecord = z.output<typeof UsersTableInsertBaseSchema>;

/**
 * The base record type for the "public.users" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserUpdateBaseRecord = Partial<UserInsertBaseRecord>;

/**
 * Insert transform for the "public.users" table.
 * Maps app cased properties to database fields.
 */
export const transformUserInsertBaseRecord = (data: UserInsertBaseRecord): {
    name: UserInsertBaseRecord['name'],
    email?: UserInsertBaseRecord['email'],
    status?: UserInsertBaseRecord['status'],
    profile?: UserInsertBaseRecord['profile'],
    created_at?: UserInsertBaseRecord['createdAt'],
    roles?: UserInsertBaseRecord['roles'],
    dates?: UserInsertBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Update transform for the "public.users" table.
 * Maps app cased properties to database fields.
 */
export const transformUserUpdateBaseRecord = (data: UserUpdateBaseRecord): {
    name: UserUpdateBaseRecord['name'],
    email?: UserUpdateBaseRecord['email'],
    status?: UserUpdateBaseRecord['status'],
    profile?: UserUpdateBaseRecord['profile'],
    created_at?: UserUpdateBaseRecord['createdAt'],
    roles?: UserUpdateBaseRecord['roles'],
    dates?: UserUpdateBaseRecord['dates'],
} => ({
    name: data.name,
    email: data.email,
    status: data.status,
    profile: data.profile,
    created_at: data.createdAt,
    roles: data.roles,
    dates: data.dates,
});

/**
 * Insert schema for the "public.users" table (after casing transform).
 */
export const UsersTableInsertSchema = UsersTableInsertBaseSchema.transform(transformUserInsertBaseRecord);

/**
 * Update schema for the "public.users" table (after casing transform).
 */
export const UsersTableUpdateSchema = UsersTableInsertBaseSchema.partial().transform(transformUserUpdateBaseRecord);

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record (casing transformed) for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    createdAt?: TableReadRecord['createdAt'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insert record (casing transformed) for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    createdAt?: TableInsertRecord['createdAt'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record (casing transformed) for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`casing options > generates schemas with camelCase field names and PascalCase object names (default) > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'posts'
    | 'users'
"
`;

exports[`casing options > generates schemas with passthrough casing > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with passthrough casing > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './users/index.js';
"
`;

exports[`casing options > generates schemas with passthrough casing > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`casing options > generates schemas with passthrough casing > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Read schema for the "public.users" table.
 * Validates raw rows read from the database.
 */
export const UsersTableSchema = z.object({
     /**
      * dataType: int4
      */
    id: z.number(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    created_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.coerce.date()).nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * Insert schema for the "public.users" table.
 */
export const UsersTableInsertSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullable().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullable().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullable().optional(),
});

/**
 * Update schema for the "public.users" table.
 */
export const UsersTableUpdateSchema = UsersTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    created_at?: TableReadRecord['created_at'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insertable record for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`casing options > generates schemas with passthrough casing > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;

exports[`casing options > generates schemas with snake_case field names > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_USERS = 'users';
"
`;

exports[`casing options > generates schemas with snake_case field names > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './users/index.js';
"
`;

exports[`casing options > generates schemas with snake_case field names > tables/users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`casing options > generates schemas with snake_case field names > tables/users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';

export const USER_ROLES = ['admin', 'editor', 'viewer'] as const;

/**
 * Read schema for the "public.users" table.
 * Validates raw rows read from the database.
 */
export const UsersTableSchema = z.object({
     /**
      * dataType: int4
      */
    id: z.number(),
     /**
      * dataType: varchar
      */
    name: z.string(),
     /**
      * dataType: varchar
      */
    email: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: varchar
      */
    status: z.string().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: timestamptz
      */
    created_at: z.coerce.date().nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().transform((value) => value ?? undefined).optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.coerce.date()).nullable().transform((value) => value ?? undefined).optional(),
});

/**
 * Insert schema for the "public.users" table.
 */
export const UsersTableInsertSchema = z.object({
     /**
      * dataType: varchar
      */
    name: z.string().max(100),
     /**
      * dataType: varchar
      */
    email: z.string().max(255).nullable().optional(),
     /**
      * dataType: varchar
      * defaultValue: 'active'::character varying
      */
    status: z.string().max(20).nullable().optional(),
     /**
      * dataType: jsonb
      */
    profile: z.any().nullable().transform((value) => value ? JSON.stringify(value) : value).optional(),
     /**
      * dataType: timestamptz
      * defaultValue: now()
      */
    created_at: z.date().nullable().optional(),
     /**
      * dataType: _text
      */
    roles: z.array(z.enum(USER_ROLES)).nullable().optional(),
     /**
      * dataType: _timestamp
      */
    dates: z.array(z.date()).nullable().optional(),
});

/**
 * Update schema for the "public.users" table.
 */
export const UsersTableUpdateSchema = UsersTableInsertSchema.partial();

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record for the "public.users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    name: TableReadRecord['name'];
    /**
    */
    email?: TableReadRecord['email'];
    /**
    */
    status?: TableReadRecord['status'];
    /**
    */
    profile?: TableReadRecord['profile'];
    /**
    */
    created_at?: TableReadRecord['created_at'];
    /**
    */
    roles?: TableReadRecord['roles'];
    /**
    */
    dates?: TableReadRecord['dates'];
}

/**
 * Insertable record for the "public.users" table.
 */
export interface UserInsertRecord {
    /**
    * @maxLen: 100
    */
    name: TableInsertRecord['name'];
    /**
    * @maxLen: 255
    */
    email?: TableInsertRecord['email'];
    /**
    * @maxLen: 20
    * @default: 'active'::character varying
    */
    status?: TableInsertRecord['status'];
    /**
    */
    profile?: TableInsertRecord['profile'];
    /**
    * @default: now()
    */
    created_at?: TableInsertRecord['created_at'];
    /**
    */
    roles?: TableInsertRecord['roles'];
    /**
    */
    dates?: TableInsertRecord['dates'];
}

/**
 * Updatable record for the "public.users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

export type UserRole = (typeof USER_ROLES)[number];
"
`;

exports[`casing options > generates schemas with snake_case field names > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'users'
"
`;
