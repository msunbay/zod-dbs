// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI generates correct zod schemas with basic options > constants.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export const TABLE_USERS = 'Users';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/Users/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './schema.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > tables/Users/schema.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

import { z } from 'zod';


/**
 * Base read schema for the "Users" table.
 * Validates raw rows read from the database (no casing transforms applied yet).
 */
export const UsersTableBaseSchema = z.object({
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: string
      */
    sort: z.string(),
     /**
      * dataType: string
      */
    email: z.string(),
     /**
      * dataType: object
      */
    profile: z.any(),
     /**
      * dataType: array
      */
    tags: z.any(),
});

/**
 * The base record type for the "Users" table.
 * This type represents the raw database record without case transforms.
 */
export type UserBaseRecord = z.output<typeof UsersTableBaseSchema>;

/**
 * Read transform for the "Users" table.
 * Maps database fields to app case properties.
 */
export const transformUserBaseRecord = (data: UserBaseRecord): {
    id: UserBaseRecord['id'],
    sort: UserBaseRecord['sort'],
    email: UserBaseRecord['email'],
    profile: UserBaseRecord['profile'],
    tags: UserBaseRecord['tags'],
} => ({
    id: data.id,
    sort: data.sort,
    email: data.email,
    profile: data.profile,
    tags: data.tags,
});

/**
 * Read schema for the "Users" table (after casing transform).
 */
export const UsersTableSchema = UsersTableBaseSchema.transform(transformUserBaseRecord);

/**
 * Base insert/write schema for the "Users" table (no casing transforms).
 */
export const UsersTableInsertBaseSchema = z.object({
     /**
      * dataType: string
      */
    id: z.string(),
     /**
      * dataType: string
      */
    sort: z.string(),
     /**
      * dataType: string
      */
    email: z.string(),
     /**
      * dataType: object
      */
    profile: z.any(),
     /**
      * dataType: array
      */
    tags: z.any(),
});

/**
 * The base record type for the "Users" table.
 * This type represents an insertable database record before casing transformations are applied.
 */
export type UserInsertBaseRecord = z.output<typeof UsersTableInsertBaseSchema>;

/**
 * The base record type for the "Users" table.
 * This type represents an updatable database record before casing transformations are applied.
 */
export type UserUpdateBaseRecord = Partial<UserInsertBaseRecord>;

/**
 * Insert transform for the "Users" table.
 * Maps app cased properties to database fields.
 */
export const transformUserInsertBaseRecord = (data: UserInsertBaseRecord): {
    id: UserInsertBaseRecord['id'],
    sort: UserInsertBaseRecord['sort'],
    email: UserInsertBaseRecord['email'],
    profile: UserInsertBaseRecord['profile'],
    tags: UserInsertBaseRecord['tags'],
} => ({
    id: data.id,
    sort: data.sort,
    email: data.email,
    profile: data.profile,
    tags: data.tags,
});

/**
 * Update transform for the "Users" table.
 * Maps app cased properties to database fields.
 */
export const transformUserUpdateBaseRecord = (data: UserUpdateBaseRecord): {
    id: UserUpdateBaseRecord['id'],
    sort: UserUpdateBaseRecord['sort'],
    email: UserUpdateBaseRecord['email'],
    profile: UserUpdateBaseRecord['profile'],
    tags: UserUpdateBaseRecord['tags'],
} => ({
    id: data.id,
    sort: data.sort,
    email: data.email,
    profile: data.profile,
    tags: data.tags,
});

/**
 * Insert schema for the "Users" table (after casing transform).
 */
export const UsersTableInsertSchema = UsersTableInsertBaseSchema.transform(transformUserInsertBaseRecord);

/**
 * Update schema for the "Users" table (after casing transform).
 */
export const UsersTableUpdateSchema = UsersTableInsertBaseSchema.partial().transform(transformUserUpdateBaseRecord);

type TableInsertRecord = z.input<typeof UsersTableInsertSchema>;
type TableReadRecord = z.output<typeof UsersTableSchema>;

/**
 * Read record (casing transformed) for the "Users" table.
 */
export interface UserRecord {
    /**
    */
    id: TableReadRecord['id'];
    /**
    */
    sort: TableReadRecord['sort'];
    /**
    */
    email: TableReadRecord['email'];
    /**
    */
    profile: TableReadRecord['profile'];
    /**
    */
    tags: TableReadRecord['tags'];
}

/**
 * Insert record (casing transformed) for the "Users" table.
 */
export interface UserInsertRecord {
    /**
    */
    id: TableInsertRecord['id'];
    /**
    */
    sort: TableInsertRecord['sort'];
    /**
    */
    email: TableInsertRecord['email'];
    /**
    */
    profile: TableInsertRecord['profile'];
    /**
    */
    tags: TableInsertRecord['tags'];
}

/**
 * Updatable record (casing transformed) for the "Users" table.
 */
export type UserUpdateRecord = Partial<UserInsertRecord>;

"
`;

exports[`CLI generates correct zod schemas with basic options > tables/index.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export * from './Users/index.js';
"
`;

exports[`CLI generates correct zod schemas with basic options > types.ts 1`] = `
"// This file is auto-generated by zod-dbs. Do not edit this file directly.

export type Table = 
    | 'Users'
"
`;
