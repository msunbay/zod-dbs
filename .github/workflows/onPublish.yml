name: Manual Publish to npm

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      dist_tag:
        description: 'npm dist-tag to use (e.g., latest, next)'
        required: false
        default: 'latest'
      bump_type:
        description: 'Semver bump type when needed (patch, minor, major)'
        required: false
        default: 'patch'
      dry_run:
        description: 'Do a dry run (no publish)'
        required: false
        type: boolean
        default: false
      package_name:
        description: 'Optional: publish only this workspace package (exact name, e.g. zod-dbs-pg)'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Build packages
        run: pnpm run build

      - name: Publish changed workspace packages to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq >/dev/null

          # Ensure npm auth is configured for pnpm/npm
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          PUBLISHED_ANY=0
          TAG_INPUT="${{ github.event.inputs.dist_tag }}"
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          DRY_INPUT="${{ github.event.inputs.dry_run }}"
          PKG_NAME_INPUT="${{ github.event.inputs.package_name }}"
          TAG_FLAG=""
          DRY_FLAG=""
          declare -a BUMPED_PKGS=()
          declare -a PUBLISH_LIST=()
          declare -a FILES_TO_COMMIT=()

          if [ -n "$TAG_INPUT" ]; then
            TAG_FLAG="--tag $TAG_INPUT"
          fi
          if [ "$DRY_INPUT" = "true" ]; then
            DRY_FLAG="--dry-run"
          fi

          # Collect packages first
          declare -A NAME_TO_JSON
          declare -A NAME_TO_DIR
          declare -a ALL_NAMES=()
          for pkg_json in packages/*/package.json; do
            [ -f "$pkg_json" ] || continue
            dir=$(dirname "$pkg_json")
            name=$(jq -r .name "$pkg_json")
            private=$(jq -r '.private // false' "$pkg_json")
            version=$(jq -r .version "$pkg_json")
            if [ "$private" = "true" ] || [ "$name" = "null" ] || [ "$version" = "null" ]; then
              continue
            fi
            NAME_TO_JSON["$name"]="$pkg_json"
            NAME_TO_DIR["$name"]="$dir"
            ALL_NAMES+=("$name")
          done

          declare -a ORDERED=()
          declare -A ADDED=()

          if [ -n "$PKG_NAME_INPUT" ]; then
            if [ -z "${NAME_TO_JSON[$PKG_NAME_INPUT]:-}" ]; then
              echo "Package '$PKG_NAME_INPUT' not found in workspace."
              echo "Available: ${ALL_NAMES[*]}"
              exit 1
            fi
            echo "Targeting single package: $PKG_NAME_INPUT"
            ORDERED+=("$PKG_NAME_INPUT")
          else
            # Define a simple priority to respect workspace dependencies
            PRIORITY=(
              "zod-dbs-core"
              "zod-dbs"
              "zod-dbs-pg" "zod-dbs-mysql" "zod-dbs-mssql" "zod-dbs-oracle"
              "zod-dbs-cli"
            )

            for p in "${PRIORITY[@]}"; do
              if [ -n "${NAME_TO_JSON[$p]:-}" ]; then
                ORDERED+=("$p")
                ADDED["$p"]=1
              fi
            done
            for n in "${ALL_NAMES[@]}"; do
              if [ -z "${ADDED[$n]:-}" ]; then
                ORDERED+=("$n")
                ADDED["$n"]=1
              fi
            done
          fi

          # Process in ordered list
          for name in "${ORDERED[@]}"; do
            pkg_json="${NAME_TO_JSON[$name]}"
            dir="${NAME_TO_DIR[$name]}"
            version=$(jq -r .version "$pkg_json")

            echo "Checking $name@$version"
            published=$(npm view "$name@$version" version || true)

            # Determine if package directory changed since last tag for this package
            last_tag=$(git tag --list "$name@v*" | sort -V | tail -n1 || true)
            changed=1
            if [ -n "$last_tag" ]; then
              if git diff --quiet "$last_tag"..HEAD -- "$dir"; then
                changed=0
              fi
            fi

            if [ "$published" = "$version" ]; then
              if [ "$changed" = "0" ]; then
                echo "No changes since $last_tag and version already published; skipping $name"
                continue
              fi
              if [ -n "$BUMP_TYPE" ] && [ "$DRY_INPUT" != "true" ]; then
                echo "Bumping $name ($version) -> $BUMP_TYPE"
                (cd "$dir" && npm version "$BUMP_TYPE" --no-git-tag-version >/dev/null)
                version=$(jq -r .version "$pkg_json")
                BUMPED_PKGS+=("$name@$version")
                FILES_TO_COMMIT+=("$pkg_json")
              else
                echo "Would bump $name but dry-run or no bump type specified; skipping"
                continue
              fi
            fi

            echo "Publishing $name@$version from $dir"
            (cd "$dir" && pnpm publish --provenance --access public --no-git-checks $TAG_FLAG $DRY_FLAG)

            if [ "$DRY_INPUT" != "true" ]; then
              PUBLISH_LIST+=("$name@$version")
              PUBLISHED_ANY=1
            fi
          done

          if [ "$DRY_INPUT" != "true" ]; then
            if [ ${#FILES_TO_COMMIT[@]} -gt 0 ]; then
              git add "${FILES_TO_COMMIT[@]}"
              git commit -m "chore(release): version bumps ${BUMPED_PKGS[*]}" || true
              git push
            fi
            if [ "$PUBLISHED_ANY" = "1" ]; then
              for entry in "${PUBLISH_LIST[@]}"; do
                pkg_name="${entry%@*}"
                pkg_ver="${entry#*@}"
                git tag "$pkg_name@v$pkg_ver"
              done
              git push --tags
            else
              echo "No packages to publish."
            fi
          fi
